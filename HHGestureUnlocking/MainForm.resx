<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADbmBIq2ZUSgduWEsXblxPd25YS89uWEvPblxPd25YSxdmVEoHbmBIqAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADZlBNC25YTsduWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhOx2ZQTQgAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADmmQ0U25YSm9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/25YSm+aZDRQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA3pYRPNqWEu3blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/25YS/9uWEv/blhL/2pYS7d6WETwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
        Ev/blhL/25YS/9uWEv/blhL/25YS/wAAAADZlRKB25YS/9uWEv/blhL/25YS/9uWEv/blhKr25YS/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/2ZUSgQAAAAAAAAAAAAAAAAAAAADbmBIq25YS/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/AAAAANmVEoHblhL/25YS/9uWEv/blhL/2ZUSgduS
        DBTblhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/bmBIqAAAAAAAAAAAAAAAAAAAAAAAA
        AADblhOx25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blRJGAAAAANuWEb/blhL/25YS/9uW
        Eb8AAAAA25USYtuWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YTsQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAANmUE0LblhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEtXbmBIqAAAAANuT
        EEDbkxBAAAAAANuYEirblhLV25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/ZlBNCAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAANuWEpvblhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uW
        EtXblhJUAAAAAN6WFCbclRNs25YS49uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YSmwAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5pkNFNqWEu3blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9qW
        Eu3mmQ0UAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA3pYRPNuWEv/blhL/25YS/9uW
        Ev/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/3pYRPAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA2pUTYNqV
        EvXblhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/2pUS9dqVE2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA15cQINuWEpvblhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/25YS/9uWEpvXlxAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAANmUE0LblhOx25YS/9uWEv/blhL/25YS/9uWEv/blhL/25YS/9uW
        Ev/blhL/25YS/9uWE7HZlBNCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADclRUk3JUSctuWEsXblxPd25YS89uW
        EvPblxPd25YSxdyVEnLclRUkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////8A///8AD//8AAP/+AAB//AAAP/gAAB/wH/gP8D/8D+A/
        /AfgP/wH4D58B8A+fAPAPnwDwD/8A8Af+APAH/gDwAgAA8AIAAPgCBAH4AwwB/AH4A/wA8AP+AAAH/wA
        AD/+AAB//wAA///AA///+B////////////8=
</value>
  </data>
</root>